#!/usr/bin/env python3
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import matplotlib.dates as mdates
import statsmodels.formula.api as smf
import seaborn as sns


def residual():
    """
    Uppgift 6 - Residualanalys
    Ber√§kna residualerna, e= y‚àíy^, f√∂r de tv√• modellerna och plotta dessa. Hur ser de ut? Plotta
    residualerna mot normalf√∂rdelningen (i Python t.ex. genom Seaborn.distplot eller
    scipy.stats.probplot). Kommentera dessa plottar utseende och beskriv vilka slutsatser vi kan dra
    utifr√•n dessa. Finns det n√•gra beroenden? Hur v√§l f√∂ljer residualerna en normalf√∂rdelning?
    Ber√§kna ocks√• deras varians och argumentera f√∂r vilken modell vi b√∂r anv√§nda utifr√•n dina resultat.
    """
    # L√§s in csv-filen och konvertera datev√§rdena till datumobjekt
    df = pd.read_csv("./data/gladhammar.csv")
    df["date"] = pd.to_datetime(df["date"])
    df["date"] = mdates.date2num(df["date"])

    y = df["value"]

    y_min = np.min(y)
    constant = 10

    # Konvertera negativa v√§rden till positiva
    if y_min < 0:
        df["log_value"] = np.log(y - y_min + constant)
    else:
        df["log_value"] = np.log(y)

    # Skapa och tr√§na en ny regressionsmodell med 'log_value' som f√∂rklarande variabel och 'date' som beroende variabel
    exp_model = smf.ols("log_value ~ date", df)
    exp_results = exp_model.fit()

    # Kondifensintervall 95%
    alpha = 0.05
    exp_predictions = exp_results.get_prediction(df).summary_frame(alpha)

    # Transformera tillbaka modellen och f√∂ruts√§gelserna innan du plottar dem
    if y_min < 0:
        exp_model = np.exp(exp_predictions["mean"]) + y_min - constant
    else:
        exp_model = np.exp(exp_predictions["mean"])

    # Skapa och tr√§na en ny linj√§r regressionsmodell med 'date' som f√∂rklarande variabel och 'value' som beroende variabel
    lin_model = smf.ols("value ~ date", df)
    lin_results = lin_model.fit()

    # Kondifensintervall 95%
    lin_predictions = lin_results.get_prediction(df).summary_frame(alpha)

    # Ber√§kna residualerna f√∂r linj√§r modell ùëí= ùë¶‚àíùë¶ÃÇ
    lin_residuals = df["value"] - lin_predictions["mean"]

    # Ber√§kna residualerna f√∂r exponentiell modell ùëí= ùë¶‚àíùë¶ÃÇ
    exp_residuals = df["value"] - exp_model

    date_formatter = mdates.DateFormatter("%Y-%m-%d")
    plt.gca().xaxis.set_major_formatter(date_formatter)

    # Plotta residualerna f√∂r linj√§r modell
    plt.scatter(
        df["date"], lin_residuals, label="Linj√§r modell Residualer", s=6, color="blue"
    )
    plt.scatter(
        df["date"],
        exp_residuals,
        label="Exponentiell modell Residualer",
        s=6,
        color="green",
    )

    plt.xlabel("Datum")
    plt.ylabel("Residualer")
    plt.legend()
    plt.show()

    # Plotta residualerna f√∂r linj√§r modell mot normalf√∂rdelningen
    sns.distplot(lin_residuals, label="Linj√§r modell residualer")

    # Plotta residualerna f√∂r exponentiell modell mot normalf√∂rdelningen
    sns.distplot(exp_residuals, label="Exponentiell modell residualer")

    plt.xlabel("Residualer")
    plt.ylabel("Frekvens")
    plt.legend()
    plt.show()

    # Ber√§kna variansen f√∂r residualerna f√∂r linj√§r modell
    lin_variance = np.var(lin_residuals)

    # Ber√§kna variansen f√∂r residualerna f√∂r exponentiell modell
    exp_variance = np.var(exp_residuals)

    # J√§mf√∂r variansen f√∂r de tv√• modellerna och argumentera f√∂r vilken modell som √§r b√§st l√§mpad f√∂r data
    print("Linj√§r varians:", lin_variance)
    print("Transformerad varians:", exp_variance)
    if lin_variance < exp_variance:
        print(
            "Linj√§r modellen ger residualer med l√§gre varians √§n exponentiell modellen, s√• den kan vara l√§mpligare f√∂r data."
        )
    else:
        print(
            "Exponentiell modellen ger residualer med l√§gre varians √§n linj√§r modellen, s√• den kan vara l√§mpligare f√∂r data."
        )
